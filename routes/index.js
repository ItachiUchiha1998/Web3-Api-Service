const express = require('express');
const router = express.Router();
const Web3 = require('web3'); 
const web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:7545"));
// var Accounts = require('web3-eth-accounts');
// var accounts = new Accounts('ws://localhost:7546');

const LenderABI = [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LoanRequest",
      "outputs": [
        {
          "name": "borrower",
          "type": "address"
        },
        {
          "name": "Lender",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_period",
          "type": "uint256"
        },
        {
          "name": "_Rinterest",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "createLoanRequest",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "borrowers",
      "outputs": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "StartUpName",
          "type": "string"
        },
        {
          "name": "StartUpIdea",
          "type": "string"
        },
        {
          "name": "LinkedInUrl",
          "type": "string"
        },
        {
          "name": "BorroweAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getBorrower",
      "outputs": [
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lenders",
      "outputs": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "lenderId",
          "type": "address"
        },
        {
          "name": "linkedInURL",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_name",
          "type": "string"
        },
        {
          "name": "_StartUpName",
          "type": "string"
        },
        {
          "name": "_StartUpIdea",
          "type": "string"
        },
        {
          "name": "_LinkedInUrl",
          "type": "string"
        }
      ],
      "name": "createBorrower",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "LenderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "BorrowerFormed",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_name",
          "type": "string"
        },
        {
          "name": "_lender",
          "type": "address"
        },
        {
          "name": "_linkedInURL",
          "type": "string"
        }
      ],
      "name": "createLender",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getLender",
      "outputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ]

const LendBytecode = '0x608060405234801561001057600080fd5b5061195b806100206000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311569aca14610093578063706f24a5146101485780637924d93f146101805780638500d9191461039d578063929eea21146105ba5780639d72fbce146106ff578063a5e77fdd146107e6578063fa2c7f9b14610939575b600080fd5b34801561009f57600080fd5b506100be60048036038101908080359060200190929190505050610a7e565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020019550505050505060405180910390f35b61016660048036038101908080359060200190929190505050610af4565b604051808215151515815260200191505060405180910390f35b34801561018c57600080fd5b506101ab60048036038101908080359060200190929190505050610c18565b60405180806020018060200180602001806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200185810385528a818151815260200191508051906020019080838360005b8381101561022957808201518184015260208101905061020e565b50505050905090810190601f1680156102565780820380516001836020036101000a031916815260200191505b50858103845289818151815260200191508051906020019080838360005b8381101561028f578082015181840152602081019050610274565b50505050905090810190601f1680156102bc5780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b838110156102f55780820151818401526020810190506102da565b50505050905090810190601f1680156103225780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b8381101561035b578082015181840152602081019050610340565b50505050905090810190601f1680156103885780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b3480156103a957600080fd5b506103c860048036038101908080359060200190929190505050610edd565b60405180806020018060200180602001806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200185810385528a818151815260200191508051906020019080838360005b8381101561044657808201518184015260208101905061042b565b50505050905090810190601f1680156104735780820380516001836020036101000a031916815260200191505b50858103845289818151815260200191508051906020019080838360005b838110156104ac578082015181840152602081019050610491565b50505050905090810190601f1680156104d95780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b838110156105125780820151818401526020810190506104f7565b50505050905090810190601f16801561053f5780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b8381101561057857808201518184015260208101905061055d565b50505050905090810190601f1680156105a55780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b3480156105c657600080fd5b506105e560048036038101908080359060200190929190505050611229565b60405180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838103835286818151815260200191508051906020019080838360005b8381101561065b578082015181840152602081019050610640565b50505050905090810190601f1680156106885780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156106c15780820151818401526020810190506106a6565b50505050905090810190601f1680156106ee5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561070b57600080fd5b506107cc600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506113b2565b604051808215151515815260200191505060405180910390f35b3480156107f257600080fd5b5061091f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506114df565b604051808215151515815260200191505060405180910390f35b34801561094557600080fd5b50610964600480360381019080803590602001909291905050506116bf565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156109da5780820151818401526020810190506109bf565b50505050905090810190601f168015610a075780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610a40578082015181840152602081019050610a25565b50505050905090810190601f168015610a6d5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154905085565b600060a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525060008084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015590505060019050919050565b600181815481101515610c2757fe5b9060005260206000209060050201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cd35780601f10610ca857610100808354040283529160200191610cd3565b820191906000526020600020905b815481529060010190602001808311610cb657829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d715780601f10610d4657610100808354040283529160200191610d71565b820191906000526020600020905b815481529060010190602001808311610d5457829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e0f5780601f10610de457610100808354040283529160200191610e0f565b820191906000526020600020905b815481529060010190602001808311610df257829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ead5780601f10610e8257610100808354040283529160200191610ead565b820191906000526020600020905b815481529060010190602001808311610e9057829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905085565b6060806060806000600186815481101515610ef457fe5b9060005260206000209060050201600001600187815481101515610f1457fe5b9060005260206000209060050201600101600188815481101515610f3457fe5b9060005260206000209060050201600201600189815481101515610f5457fe5b906000526020600020906005020160030160018a815481101515610f7457fe5b906000526020600020906005020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561103b5780601f106110105761010080835404028352916020019161103b565b820191906000526020600020905b81548152906001019060200180831161101e57829003601f168201915b50505050509450838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110d75780601f106110ac576101008083540402835291602001916110d7565b820191906000526020600020905b8154815290600101906020018083116110ba57829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111735780601f1061114857610100808354040283529160200191611173565b820191906000526020600020905b81548152906001019060200180831161115657829003601f168201915b50505050509250818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561120f5780601f106111e45761010080835404028352916020019161120f565b820191906000526020600020905b8154815290600101906020018083116111f257829003601f168201915b505050505091509450945094509450945091939590929450565b60028181548110151561123857fe5b9060005260206000209060030201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112e45780601f106112b9576101008083540402835291602001916112e4565b820191906000526020600020905b8154815290600101906020018083116112c757829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113a85780601f1061137d576101008083540402835291602001916113a8565b820191906000526020600020905b81548152906001019060200180831161138b57829003601f168201915b5050505050905083565b600080600160026060604051908101604052808881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018681525090806001815401808255809150509060018203906000526020600020906003020160009091929091909150600082015181600001908051906020019061143292919061188a565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019061149692919061188a565b5050500390507f286a622e0821b508c3eb1b8e15e7efb34edcaedac58c975239f74f0b1b7b7c91816040518082815260200191505060405180910390a160019150509392505050565b60008060018060a0604051908101604052808981526020018881526020018781526020018681526020013373ffffffffffffffffffffffffffffffffffffffff1681525090806001815401808255809150509060018203906000526020600020906005020160009091929091909150600082015181600001908051906020019061156a92919061188a565b50602082015181600101908051906020019061158792919061188a565b5060408201518160020190805190602001906115a492919061188a565b5060608201518160030190805190602001906115c192919061188a565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050500390507f7754dc5fb12c3e5c54a4c9841e8590c6e410a41e7911b8a3e02258c8d98bf56386826040518080602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561167757808201518184015260208101905061165c565b50505050905090810190601f1680156116a45780820380516001836020036101000a031916815260200191505b50935050505060405180910390a16001915050949350505050565b60006060806002848154811015156116d357fe5b906000526020600020906003020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028581548110151561171457fe5b906000526020600020906003020160000160028681548110151561173457fe5b9060005260206000209060030201600201818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117da5780601f106117af576101008083540402835291602001916117da565b820191906000526020600020905b8154815290600101906020018083116117bd57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118765780601f1061184b57610100808354040283529160200191611876565b820191906000526020600020905b81548152906001019060200180831161185957829003601f168201915b505050505090509250925092509193909250565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106118cb57805160ff19168380011785556118f9565b828001600101855582156118f9579182015b828111156118f85782518255916020019190600101906118dd565b5b509050611906919061190a565b5090565b61192c91905b80821115611928576000816000905550600101611910565b5090565b905600a165627a7a7230582069b487913fab63f7c978daddc9fc64f64f0632bf17ff73f0661d6a27ff319b630029'
const Lend_contract_address = '0xebbdff6117674fe1ea7e0726fbbe8738810a37e0'
const fromAccount = '0xb9695e0DfcccfF1502eb6252FB45Fc7De92220af'

const LendContract = new web3.eth.Contract(
    LenderABI, 
    Lend_contract_address, {
      from: fromAccount,
      gasPrice: '20000000000' // default gas price in wei, 20 gwei in this case
  });

LendContract.options.data = LendBytecode;

router.post('/',(req,res) => {
  res.send({success: true})
});

router.post('/createAccount' , (req,res) => {
  
  // web3.eth.accounts.create().then(function(data){
  //  console.log(data);
  //  res.send({success: true}) 
  // });

  //web3.eth.accounts.privateKeyToAccount('2ed1974a7707dd9951e5986f0c3c2bcc6399f6a9da59498a5839f4974bfe07f7')
  // .then(function(data){
  //  console.log(data);
  //  web3.eth.accounts.signTransaction(tx, privateKey [, callback]);
  //  res.send({success: true})
  // })

  res.send({success: true})
  
})

router.post('/getLender',(req,res) => {

  LendContract.methods.getLender(req.body.id).call({from: fromAccount})
    .then(function(receipt){
      res.send({success: true})
       console.log(receipt);
    }).catch(function(err){
      console.log(err)
      res.send({success: false})
    });

});

router.post('/getBorrower',(req,res) => {

  LendContract.methods.getBorrower(req.body.id).call({from: fromAccount})
    .then(function(receipt){
      res.send({success: true})
       console.log(receipt);
    }).catch(function(err){
      console.log(err)
      res.send({success: false})
    });

});


router.post('/createBorrower',(req,res) => {

  LendContract.methods.createBorrower(req.body.name,req.body.startupname,req.body.startupidea,req.body.linkedInURL)
    .send({from: fromAccount,gasPrice: '20000000000',gas: 1500000})
      .then(function(receipt){
          console.log(receipt);
          res.send({success: true})
      }).catch(function(err) {
        res.send({success: false})
      });
  
});

router.post('/createLender',(req,res) => {

  LendContract.methods.createLender(req.body.name,fromAccount,req.body.linkedInURL)
    .send({from: fromAccount,gasPrice: '20000000000',gas: 1500000})
      .then(function(receipt){
          console.log(receipt);
          res.send({success: true})
      }).catch(function(err) {
        res.send({success: false})
      });
  
});


router.post('/events',(req,res) => {

  //LendContract.once('BorrowerFormed', {
  //}, function(error, event){ 
  //  console.log(event); 
    res.send({success: true})
  //});

})

router.post('/getAddress' , (req,res) => {
  
  LendContract.deploy({})
    .send({
        from: fromAccount,
        gas: 1500000,
        gasPrice: '20000000000'
    })
    .then(function(newContractInstance){
        console.log(newContractInstance.options.address) // instance with the new contract address
        res.send({success: true})
    });

});

router.post('/checkGas', (req, res) => {

  LendContract.deploy({
      arguments: [123, 'My String']
  })
  .estimateGas(function(err, gas){
      console.log(gas);
      res.send({success: true})
  });

});

router.post('*',(req,res) => {
  res.status(403).send({success: false,message: 'Does not exist'})
});

router.delete('*',(req,res) => {
  res.status(403).send({success: false,message: 'Does not exist'})
});

router.put('*',(req,res) => {
  res.status(403).send({success: false,message: 'Does not exist'})
});

router.get('*',(req,res) => {
  res.status(403).send({success: false,message: 'Does not exist'})
});

module.exports = router;

// web3.eth.sendTransaction({from: '0x4402D175A3B8510400F88394D8423381d98D701C', data: '0xb9695e0DfcccfF1502eb6252FB45Fc7De92220af'})
  //  .once('transactionHash', function(hash){ console.log(hash) })
  //  .once('receipt', function(receipt){ console.log(receipt) })
  //  .on('confirmation', function(confNumber, receipt){ console.log(receipt) })
  //  .on('error', function(error){ console.log(error) })
  //  .then(function(receipt){
  //      console.log(receipt)
  // });

  //  console.log("Contract: " + JSON.stringify(LendContract.options.address)  /* + JSON.stringify(LendContract.options.jsonInterface)
  //         JSON.stringify(LendContract.options.from) */ )

    // LendContract.methods.getOrgan(0).call({from: '0xb9695e0DfcccfF1502eb6252FB45Fc7De92220af'})
    // .then(function(receipt){
    //  res.send({success: true})
    //   console.log(receipt);
    // }).catch(function(err){
    //  console.log(err)
    //  res.send({success: false})
    // });